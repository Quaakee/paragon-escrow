{"version":3,"sources":["../src/index.ts","../src/create-diagnostic.ts","../src/find-config-file.ts","../src/find-file-up.ts","../src/normalize-path-separator.ts","../src/resolve-ts-config.ts"],"sourcesContent":["export * from './create-diagnostic.js';\nexport * from './find-config-file.js';\nexport * from './resolve-ts-config.js';\nexport * from './normalize-path-separator.js';\n","import ts from 'typescript';\n\nexport type DiagnosticMessage = {\n  messageText: string | ts.DiagnosticMessageChain;\n  code?: number | undefined;\n  category?: ts.DiagnosticCategory | undefined;\n  file?: string | ts.SourceFile | undefined;\n  start?: number | undefined;\n  length?: number | undefined;\n};\n\nexport function createDiagnostic(message: DiagnosticMessage): ts.Diagnostic {\n  let file = message.file;\n\n  if (typeof file === 'string') {\n    file = ts.createSourceFile(file, ts.sys.readFile(file) ?? '', ts.ScriptTarget.ESNext);\n  }\n\n  return {\n    messageText: message.messageText,\n    code: message.code === undefined ? -0 : message.code,\n    category: message.category ?? ts.DiagnosticCategory.Error,\n    file,\n    start: message.start ?? undefined,\n    length: message.length ?? undefined,\n  };\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport ts from 'typescript';\nimport { findFileUp } from './find-file-up.js';\nimport { createDiagnostic } from './create-diagnostic.js';\nimport { normalizePathSeparator } from './normalize-path-separator.js';\n\n/**\n * The {@link findConfigFile} Options.\n */\nexport type FindConfigFileOptions = {\n  filePath: string;\n  startDirectory?: string | undefined;\n  stopDirectory?: string | undefined;\n  startDirectoryShouldExists?: boolean | undefined;\n};\n\ntype NormalizedOptions = {\n  fileName: string;\n  startDirectory: string;\n  stopDirectory: string | undefined;\n  startDirectoryShouldExists: boolean | undefined;\n};\n\ntype NormalizeOptions =\n  | { diagnostics: ts.Diagnostic[]; normalizedOptions?: never }\n  | { normalizedOptions: NormalizedOptions; diagnostics?: never };\n\nfunction normalizeOptions(options: FindConfigFileOptions): NormalizeOptions {\n  const absolutePath = normalizePathSeparator(path.resolve(options.startDirectory ?? process.cwd(), options.filePath));\n  const startDirectory = path.dirname(absolutePath);\n\n  if (options.startDirectory && path.isAbsolute(options.filePath)) {\n    const providedStartDirectory = normalizePathSeparator(path.resolve(options.startDirectory));\n\n    if (startDirectory !== providedStartDirectory) {\n      return {\n        diagnostics: [\n          createDiagnostic({\n            code: -100,\n            messageText: `Do not specify the 'startDirectory' option if you give an absolute 'filePath' or they must be equal. Expected '${startDirectory}', received '${providedStartDirectory}'.`,\n          }),\n        ],\n      };\n    }\n  }\n\n  if (options.startDirectoryShouldExists && !fs.existsSync(startDirectory)) {\n    return {\n      diagnostics: [\n        createDiagnostic({\n          code: 6148,\n          messageText: `Directory '${startDirectory}' does not exist, skipping all lookups in it.`,\n        }),\n      ],\n    };\n  }\n\n  return {\n    normalizedOptions: {\n      fileName: path.basename(absolutePath),\n      startDirectory,\n      startDirectoryShouldExists: Boolean(options.startDirectoryShouldExists),\n      stopDirectory: options.stopDirectory ? normalizePathSeparator(path.resolve(options.stopDirectory)) : undefined,\n    },\n  };\n}\n\nexport type FindConfigFile =\n  | { diagnostics: ts.Diagnostic[]; configFilePath?: never }\n  | { configFilePath: string; diagnostics?: never };\n\n/**\n * Find a config file with some options.\n *\n * @param options See {@link FindConfigFileOptions}.\n * @returns The config file path or `undefined`.\n */\nexport function findConfigFile(options: FindConfigFileOptions): FindConfigFile {\n  const { diagnostics: diagnostic, normalizedOptions } = normalizeOptions(options);\n\n  if (diagnostic) {\n    return { diagnostics: diagnostic };\n  }\n\n  const { startDirectory, stopDirectory, fileName } = normalizedOptions;\n\n  const configFilePath = findFileUp(startDirectory, stopDirectory, (directory) => {\n    const filePath = `${directory}/${fileName}`;\n\n    return ts.sys.fileExists(filePath) ? filePath : undefined;\n  });\n\n  if (configFilePath) {\n    return { configFilePath };\n  }\n\n  return {\n    diagnostics: [\n      createDiagnostic({\n        code: 5081,\n        messageText: `Cannot find a '${fileName}' file at the current directory: '${startDirectory}'.`,\n      }),\n    ],\n  };\n}\n","import path from 'node:path';\n\nexport function findFileUp(\n  directory: string,\n  stopDirectory: string | undefined,\n  callback: (directory: string) => string | undefined,\n): string | undefined {\n  const result = callback(directory);\n\n  if (result !== undefined) {\n    return result;\n  }\n\n  if (directory === stopDirectory) {\n    return undefined;\n  }\n\n  const parentPath = path.dirname(directory);\n\n  if (parentPath === directory) {\n    return undefined;\n  }\n\n  return findFileUp(parentPath, stopDirectory, callback);\n}\n","export function normalizePathSeparator(path: string): string {\n  return path.replace(/[/\\\\]+/g, '/');\n}\n","import ts from 'typescript';\nimport path from 'node:path';\nimport { findConfigFile } from './find-config-file.js';\nimport { createDiagnostic } from './create-diagnostic.js';\n\n/**\n * The {@link resolveTsConfig} Options.\n */\nexport type ResolveTsConfigOptions = {\n  filePath?: string | undefined;\n  startDirectory?: string | undefined;\n  stopDirectory?: string | undefined;\n  startDirectoryShouldExists?: boolean | undefined;\n};\n\nexport type ResolvedTsConfig =\n  | { diagnostics: ts.Diagnostic[]; config?: never }\n  | { config: ts.ParsedCommandLine; diagnostics?: never };\n\n/**\n * Find and resolve a tsconfig with some options.\n *\n * @param options See {@link ResolveTsConfigOptions}.\n * @returns The resolved config or an array of diagnostics.\n */\nexport function resolveTsConfig(options?: ResolveTsConfigOptions): ResolvedTsConfig {\n  const filePath = options?.filePath ?? 'tsconfig.json';\n  const { diagnostics, configFilePath } = findConfigFile({ ...options, filePath });\n\n  if (diagnostics) {\n    return { diagnostics };\n  }\n\n  const jsonText = ts.sys.readFile(configFilePath);\n\n  if (!jsonText) {\n    return {\n      diagnostics: [\n        createDiagnostic({ code: 5083, file: configFilePath, messageText: `Cannot read file '${configFilePath}'.` }),\n      ],\n    };\n  }\n\n  const configObject = ts.parseConfigFileTextToJson(configFilePath, jsonText);\n\n  if (configObject.error) {\n    return { diagnostics: [configObject.error] };\n  }\n\n  const parsedCommandLine = ts.parseJsonConfigFileContent(\n    configObject.config,\n    ts.sys,\n    path.dirname(configFilePath),\n    undefined,\n    configFilePath,\n  );\n\n  if (parsedCommandLine.errors.length > 0) {\n    return { diagnostics: parsedCommandLine.errors };\n  }\n\n  return { config: parsedCommandLine };\n}\n"],"mappings":"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","names":["ts","import_node_path","import_typescript","path","path","path","fs","ts","import_typescript","import_node_path","ts","path"]}