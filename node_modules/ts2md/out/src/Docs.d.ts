import { DocBase, DocGenSupportApi, DocItem } from "./JSDocs";
import ts from "typescript";
/**
 * @private
 */
export declare class DocVariable extends DocBase<ts.VariableDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.VariableDeclaration, sf: ts.SourceFile): string;
    filterItem(item: ts.Node): ts.VariableDeclaration[];
}
/**
 * @private
 */
export declare class DocType extends DocBase<ts.TypeAliasDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.TypeAliasDeclaration): string;
    filterItem(item: ts.Node): ts.TypeAliasDeclaration[];
}
/**
 * @private
 */
export declare class DocFunction extends DocBase<ts.FunctionDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.FunctionDeclaration): string;
    filterItem(item: ts.Node): ts.FunctionDeclaration[];
    toMarkDownTs(docItem: DocItem<ts.FunctionDeclaration>): string;
    toMarkDownDetails(docItem: DocItem<ts.FunctionDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocProperty extends DocBase<ts.PropertyDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.PropertyDeclaration): string;
    filterItem(item: ts.Node): ts.PropertyDeclaration[];
    toMarkDownDetails(docItem: DocItem<ts.PropertyDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocConstructor extends DocBase<ts.ConstructorDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.ConstructorDeclaration): string;
    filterItem(item: ts.Node): ts.ConstructorDeclaration[];
    toMarkDownTs(docItem: DocItem<ts.ConstructorDeclaration>): string;
    toMarkDownDetails(docItem: DocItem<ts.ConstructorDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocMethod extends DocBase<ts.MethodDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.MethodDeclaration): string;
    filterItem(item: ts.Node): ts.MethodDeclaration[];
    toMarkDownTs(docItem: DocItem<ts.MethodDeclaration>): string;
    toMarkDownDetails(docItem: DocItem<ts.MethodDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocClass extends DocBase<ts.ClassDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.ClassDeclaration): string;
    filterItem(item: ts.Node): ts.ClassDeclaration[];
    extractMemberDocs(docItem: DocItem<ts.ClassDeclaration>): DocBase<ts.Node>[];
    toMarkDownTs(docItem: DocItem<ts.ClassDeclaration>): string;
    toMarkDownDetails(docItem: DocItem<ts.ClassDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocPropertySignature extends DocBase<ts.PropertySignature> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.PropertySignature): string;
    filterItem(item: ts.Node): ts.PropertySignature[];
    toMarkDownDetails(docItem: DocItem<ts.PropertySignature>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocMethodSignature extends DocBase<ts.MethodSignature> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.MethodSignature): string;
    filterItem(item: ts.Node): ts.MethodSignature[];
    toMarkDownTs(docItem: DocItem<ts.MethodSignature>): string;
    toMarkDownDetails(docItem: DocItem<ts.MethodSignature>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocInterface extends DocBase<ts.InterfaceDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.InterfaceDeclaration): string;
    filterItem(item: ts.Node): ts.InterfaceDeclaration[];
    extractMemberDocs(docItem: DocItem<ts.InterfaceDeclaration>): DocBase<ts.Node>[];
    toMarkDownDetails(docItem: DocItem<ts.InterfaceDeclaration>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocEnumMember extends DocBase<ts.EnumMember> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.EnumMember): string;
    filterItem(item: ts.Node): ts.EnumMember[];
    toMarkDownDetails(docItem: DocItem<ts.EnumMember>, mdLinks: Record<string, string>): string;
}
/**
 * @private
 */
export declare class DocEnum extends DocBase<ts.EnumDeclaration> {
    constructor(sup: DocGenSupportApi);
    getName(item: ts.EnumDeclaration): string;
    filterItem(item: ts.Node): ts.EnumDeclaration[];
    extractMemberDocs(docItem: DocItem<ts.EnumDeclaration>): DocBase<ts.Node>[];
    toMarkDownDetails(docItem: DocItem<ts.EnumDeclaration>, mdLinks: Record<string, string>): string;
}
//# sourceMappingURL=Docs.d.ts.map