import ts from 'typescript';

declare type DiagnosticMessage = {
    messageText: string | ts.DiagnosticMessageChain;
    code?: number | undefined;
    category?: ts.DiagnosticCategory | undefined;
    file?: string | ts.SourceFile | undefined;
    start?: number | undefined;
    length?: number | undefined;
};
declare function createDiagnostic(message: DiagnosticMessage): ts.Diagnostic;

/**
 * The {@link findConfigFile} Options.
 */
declare type FindConfigFileOptions = {
    filePath: string;
    startDirectory?: string | undefined;
    stopDirectory?: string | undefined;
    startDirectoryShouldExists?: boolean | undefined;
};
declare type FindConfigFile = {
    diagnostics: ts.Diagnostic[];
    configFilePath?: never;
} | {
    configFilePath: string;
    diagnostics?: never;
};
/**
 * Find a config file with some options.
 *
 * @param options See {@link FindConfigFileOptions}.
 * @returns The config file path or `undefined`.
 */
declare function findConfigFile(options: FindConfigFileOptions): FindConfigFile;

/**
 * The {@link resolveTsConfig} Options.
 */
declare type ResolveTsConfigOptions = {
    filePath?: string | undefined;
    startDirectory?: string | undefined;
    stopDirectory?: string | undefined;
    startDirectoryShouldExists?: boolean | undefined;
};
declare type ResolvedTsConfig = {
    diagnostics: ts.Diagnostic[];
    config?: never;
} | {
    config: ts.ParsedCommandLine;
    diagnostics?: never;
};
/**
 * Find and resolve a tsconfig with some options.
 *
 * @param options See {@link ResolveTsConfigOptions}.
 * @returns The resolved config or an array of diagnostics.
 */
declare function resolveTsConfig(options?: ResolveTsConfigOptions): ResolvedTsConfig;

declare function normalizePathSeparator(path: string): string;

export { DiagnosticMessage, FindConfigFile, FindConfigFileOptions, ResolveTsConfigOptions, ResolvedTsConfig, createDiagnostic, findConfigFile, normalizePathSeparator, resolveTsConfig };
