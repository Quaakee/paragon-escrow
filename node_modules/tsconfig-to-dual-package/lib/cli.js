"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.createCli = void 0;
const node_util_1 = require("node:util");
const tsconfig_to_dual_package_js_1 = require("./tsconfig-to-dual-package.js");
const HELP = `
    Usage
      $ tsconfig-to-dual-package [Option] <tsconfig.json>
 
    Options
      --cwd                 [String] current working directory. Default: process.cwd()
      --debug               [Boolean] Enable debug output
      --help                [Boolean] show help

    Examples
      # Find tsconfig*.json in cwd and convert to dual package
      $ tsconfig-to-dual-package
      # Convert specified tsconfig.json to dual package
      $ tsconfig-to-dual-package ./config/tsconfig.esm.json ./config/tsconfig.cjs.json

`;
const createCli = () => {
    return (0, node_util_1.parseArgs)({
        strict: true,
        allowPositionals: true,
        options: {
            cwd: {
                type: "string",
                default: process.cwd()
            },
            help: {
                type: "boolean",
                alias: "h"
            },
            debug: {
                type: "boolean",
                default: false
            }
        }
    });
};
exports.createCli = createCli;
const run = async (cli = (0, exports.createCli)()) => {
    var _a;
    if (cli.values.help) {
        return { exitStatus: 0, stdout: HELP, stderr: null };
    }
    const options = {
        targetTsConfigFilePaths: cli.positionals,
        cwd: (_a = cli.values.cwd) !== null && _a !== void 0 ? _a : process.cwd(),
        debug: cli.values.debug
    };
    await (0, tsconfig_to_dual_package_js_1.tsconfigToDualPackages)(options);
    return {
        stdout: null,
        stderr: null,
        exitStatus: 0
    };
};
exports.run = run;
//# sourceMappingURL=cli.js.map