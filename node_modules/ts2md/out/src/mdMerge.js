"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdMerge = void 0;
const fs = __importStar(require("fs"));
const os_1 = require("os");
/**
 * Quick and dirty README.md merge function.
 *
 * The anchors must not be indented and must exactly match:
 *
 *    `<!--#region ts2md-api-merged-here-->`
 *
 *    `<!--#endregion ts2md-api-merged-here-->`
 *
 * @param md The markdown to insert between the start and end anchors.
 * @param mergePath Fully resolved path to create or update.
 */
function mdMerge(md, mergePath, requireAnchors = true) {
    let preMergeMd;
    try {
        preMergeMd = fs.readFileSync(mergePath, { encoding: 'utf8' });
    }
    catch (_a) {
        fs.writeFileSync(mergePath, md);
        return;
    }
    const mergeStartAnchor = `<!--#region ts2md-api-merged-here-->`;
    const mergeEndAnchor = `<!--#endregion ts2md-api-merged-here-->`;
    let posStart = preMergeMd.indexOf('\n' + mergeStartAnchor);
    let posEnd = preMergeMd.indexOf('\n' + mergeEndAnchor);
    if (posStart > -1 && posEnd > -1 && posStart < posEnd) {
        posStart++;
        posEnd++;
        const mergedMd = preMergeMd.slice(0, posStart + mergeStartAnchor.length) +
            os_1.EOL + md + os_1.EOL +
            preMergeMd.slice(posEnd);
        try {
            fs.unlinkSync(mergePath);
        }
        catch ( /* */_b) { /* */ }
        fs.writeFileSync(mergePath, mergedMd);
    }
    else if (requireAnchors) {
        console.error(`
ts2md anchors missing or inverted in README.md

Be sure to add exactly:

<!--#region ts2md-api-merged-here-->
<!--#endregion ts2md-api-merged-here-->

`);
    }
    else {
        try {
            fs.unlinkSync(mergePath);
        }
        catch ( /* */_c) { /* */ }
        fs.writeFileSync(mergePath, md);
    }
}
exports.mdMerge = mdMerge;
//# sourceMappingURL=mdMerge.js.map